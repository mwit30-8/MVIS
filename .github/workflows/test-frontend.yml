# Simple workflow for deploying static content to GitHub Pages
name: Build and Test Expo

on:
  # Runs on pushes targeting the default branch
  push:
    branches:
      - "*"
    paths:
      - .github/workflows/*-frontend.yml
      - frontend/**

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Start local DGraph
        run: docker compose up --wait --build
        working-directory: ./backend
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            ./backend/node_modules
          key: ${{ runner.os }}-${{ hashFiles('./backend/yarn.lock') }}
      - name: Install dependencies
        run: yarn install
        working-directory: ./backend
      - name: Deploy to local Dgraph
        run: |
          sudo yarn ts-node ./deploy \
            --local \
            --port 8080 \
            --github-action
        working-directory: ./backend
        id: dgraph

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            ./frontend/node_modules
          key: ${{ runner.os }}-${{ hashFiles('./frontend/yarn.lock') }}
      - name: Install dependencies
        run: yarn install
      - name: Generate graphql in typescript
        env:
          NODE_ENV: production
          BACKEND_URL: ${{ steps.dgraph.outputs.url }}
        run: yarn codegen
        # Todo: Run tests
      - name: Build GitHub Pages
        env:
          NODE_ENV: production
          BACKEND_URL: ${{ steps.dgraph.outputs.url }}
        run: npx expo export:web

      - name: Stop local DGraph
        if: always()
        run: docker compose down
        working-directory: ./backend
