name: Build, Test, and Deploy

on:
  push:
    branches:
      - "*"
  pull_request:

  workflow_dispatch:

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            backend:
              - 'backend/**'
              - '.github/workflows/**'
            frontend:
              - 'frontend/**'
              - '.github/workflows/**'

  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Start local DGraph
        run: docker compose up --wait --build
        working-directory: ./backend
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            ./backend/node_modules
          key: ${{ runner.os }}-${{ hashFiles('./backend/yarn.lock') }}
      - name: Install dependencies
        run: yarn install
        working-directory: ./backend
      - name: Deploy to local Dgraph
        run: |
          sudo yarn ts-node ./deploy \
            --local \
            --port 8080 \
            --github-action
        working-directory: ./backend
        id: dgraph
        # Todo: Run tests on backend

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            ./frontend/node_modules
          key: ${{ runner.os }}-${{ hashFiles('./frontend/yarn.lock') }}
      - name: Install dependencies
        run: yarn install
        working-directory: ./frontend
      - name: Generate graphql in typescript
        env:
          NODE_ENV: production
          BACKEND_URL: ${{ steps.dgraph.outputs.url }}
        run: yarn codegen
        working-directory: ./frontend
        # Todo: Run tests on frontend
      - name: Build GitHub Pages
        env:
          NODE_ENV: production
          BACKEND_URL: ${{ steps.dgraph.outputs.url }}
        run: npx expo export:web
        working-directory: ./frontend

      - name: Stop local DGraph
        if: always()
        run: docker compose down
        working-directory: ./backend

  tested:
    runs-on: ubuntu-latest
    needs: ["changes", "build-and-test"]
    steps:
      - name: Log the status
        run: echo "Tests passed."

  deploy-backend:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' && needs.changes.outputs.backend == 'true'}}
    needs: ["build-and-test"]
    environment:
      name: dgraph-cloud
      url: ${{ steps.dgraph.outputs.url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            ./backend/node_modules
          key: ${{ runner.os }}-${{ hashFiles('./backend/yarn.lock') }}
      - name: Install dependencies
        run: yarn install
      - name: Deploy to Dgraph Cloud
        if:
        id: dgraph
        run: |
          sudo yarn ts-node ./deploy \
            --cerebro-token ${{ secrets.CEREBRO_JWT }} \
            --deployment-name ${{ secrets.DEPLOYMENT_NAME }} \
            --auth0-clientid ${{ secrets.AUTH0_CLIENT_ID }} \
            --auth0-domain ${{ secrets.AUTH0_DOMAIN }} \
            --github-action

  build-frontend:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' && needs.changes.outputs.frontend == 'true'}}
    needs: ["build-and-test", "deploy-backend"]
    defaults:
      run:
        working-directory: ./frontend
    environment:
      name: build-frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            ./backend/node_modules
          key: ${{ runner.os }}-${{ hashFiles('./backend/yarn.lock') }}
      - name: Install dependencies
        run: yarn install
        working-directory: ./backend
      - name: Get DGraph Cloud information
        run: yarn ts-node ./deploy --info
        id: dgraph
      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            ./frontend/node_modules
          key: ${{ runner.os }}-${{ hashFiles('./frontend/yarn.lock') }}
      - name: Install dependencies
        run: yarn install
      - name: Generate graphql in typescript
        env:
          NODE_ENV: production
          BACKEND_URL: ${{ steps.dgraph.outputs.url }}
        run: yarn codegen
      - name: Setup Pages
        uses: actions/configure-pages@v2
      - name: Build GitHub Pages
        env:
          NODE_ENV: production
          BACKEND_URL: ${{ steps.dgraph.outputs.url }}
          BACKEND_API_KEY: ${{ secrets.BACKEND_API_KEY }}
          AUTH0_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}
          AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
        run: npx expo export:web
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: "./frontend/web-build"

  deploy-frontend:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: ["build-frontend"]
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
